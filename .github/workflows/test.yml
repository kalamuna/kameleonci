name: Test KameleonCI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: YAML Lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .github/workflows/kameleonci.yml
          config_file: .yamllint.yml

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install BATS
        run: |
          git clone https://github.com/bats-core/bats-core.git
          cd bats-core
          ./install.sh $HOME
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Run Tests
        run: |
          bats tests/

  integration-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario: ['pantheon', 'platform', 'acquia']
    steps:
      - uses: actions/checkout@v3

      - name: Setup Test Environment
        run: |
          # Create mock test repository
          mkdir -p test-repo
          cd test-repo
          git init

          # Set up based on scenario
          case "${{ matrix.scenario }}" in
            pantheon)
              echo "Setting up Pantheon scenario"
              export DEPLOY_REPO="ssh://codeserver.dev.site@codeserver.dev.site.drush.in:2222/~/repository.git"
              ;;
            platform)
              echo "Setting up Platform.sh scenario"
              export DEPLOY_REPO="project@git.region.platform.sh:project.git"
              ;;
            acquia)
              echo "Setting up Acquia scenario"
              export DEPLOY_REPO="project@git.acquia.com:project.git"
              ;;
          esac

          # Persist DEPLOY_REPO for next step
          echo "DEPLOY_REPO=$DEPLOY_REPO" >> $GITHUB_ENV

          # Set common test variables
          echo "GIT_NAME=Test User" >> $GITHUB_ENV
          echo "GIT_EMAIL=test@example.com" >> $GITHUB_ENV
          echo "SSH_CONFIG=Host *" >> $GITHUB_ENV

      - name: Verify Host Detection
        run: |
          source .github/scripts/workflow_functions.sh
          echo "DEPLOY_REPO=$DEPLOY_REPO"
          HOST=$(detect_host)
          echo "HOST=$HOST"
          if [[ "$HOST" != "${{ matrix.scenario }}" ]]; then
            echo "‚ùå Host detection failed for ${{ matrix.scenario }}"
            echo "Expected: ${{ matrix.scenario }}"
            echo "Got: $HOST"
            exit 1
          fi
